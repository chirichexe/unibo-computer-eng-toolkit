// CONTA LINEE CARATTERE SOGLIA ====================== SNIPPET
// Variabili ------------------------------------------------
char buffer[DIM_BUFF];
int bytes_read;
int line_count = 0;
int count = 0;

char carattere = 'a';
int soglia = 5;

// Algoritmo ------------------------------------------------
int fd = open(input, O_RDONLY);
if (fd < 0) {
    perror("Errore apertura file");
    //ERRORE
}

while ((bytes_read = read(fd, buffer, DIM_BUFF)) > 0) {
    for (i = 0; i < bytes_read; i++ ) {
        char c = buffer[i];
        
        // operazione sulle righe
        if (tolower(c) == carattere) {
            count++;
        }
        if (c == '\n') {
            if (count >= soglia) {
                line_count++;
            }
            count = 0;
        }
    }
}

if (bytes_read < 0) {
    perror("Errore lettura file");
    close(fd);
    //ERRORE
}

close(fd);
printf("Numero di righe con almeno N CARATTERI: %d\n", line_count);
// FINE CONTA LINEE CARATTERE SOGLIA ================= SNIPPET

// VERSIONE 2

// CONTA LINEE CARATTERE SOGLIA ======================
// Variabili (da spostare sopra) ----------------------------
int fd = -1;
char primoCarattere; 

// Algoritmo ------------------------------------------------
fd = open(fullpath, O_RDONLY);
if (fd < 0) {
    perror("Errore apertura file");
    risultato = -1;                
    if (sendto(udpfd, &risultato, sizeof(risultato), 0, (struct sockaddr *)&cliaddr, len) < 0) {
        perror("sendto");
        continue;
    }
    continue;
}

char primoCarattere;
while ((bytes_read = read(fd, buffer, DIM_BUFF)) > 0) {
    for (int i = 0; i < bytes_read; ++i) {
        
        if (i == 0){
            primoCarattere = buffer[0];
        }
        if (buffer[i] == invioUDP.carattere) {
            count++;
        }
        if (buffer[i] == '\n') {
            if (count >= invioUDP.numOccorrenze && islower(primoCarattere)) {
                risultato++;
            }
            count = 0;
            primoCarattere = buffer[i + 1];
        }
    }
}

if (bytes_read < 0) {
    perror("Errore lettura file");
    close(fd);
    risultato = -1;                
    if (sendto(udpfd, &risultato, sizeof(risultato), 0, (struct sockaddr *)&cliaddr, len) < 0) {
        perror("sendto");
        continue;
    }
    continue;
}

close(fd);
memset(fullpath, 0, sizeof(fullpath)); // elimina
// FINE CONTA LINEE CARATTERE SOGLIA ================= SNIPPET

// VERSIONE 3

// CONTA LINEE CARATTERE SOGLIA ====================== SNIPPET
// Variabili (dichiarate in alto) ---------------------------
int fd = -1;
char primoCarattere = '\0';
int is_new_line = 1;
int bytes_read = 0;
int count = 0;
int risultato = 0;
char buffer[DIM_BUFF];
char c;

// Algoritmo ------------------------------------------------
fd = open(fullpath, O_RDONLY);
if (fd < 0) {
    perror("Errore apertura file");
    risultato = -1;
    if (sendto(udpfd, &risultato, sizeof(risultato), 0, (struct sockaddr *)&cliaddr, len) < 0) {
        perror("sendto");
    }
    continue;
}

while ((bytes_read = read(fd, buffer, DIM_BUFF)) > 0) {
    for ( i = 0; i < bytes_read; ++i ) {
        c = buffer[i];

        // Aggiorna primo carattere all'inizio della riga
        if (is_new_line) {
            primoCarattere = c;
            is_new_line = 0;
        }

        // Condizione sul carattere della riga
        if (c == invioUDP.carattere) {
            count++;
        }

        // Condizione sulla riga e sul primo carattere
        if (c == '\n') {
            if (count >= invioUDP.numOccorrenze && islower(primoCarattere)) {
                risultato++;
            }
            count = 0;
            is_new_line = 1; // Nuova riga in arrivo
        }
    }
}

if (bytes_read < 0) {
    perror("Errore lettura file");
    close(fd);
    risultato = -1;
    if (sendto(udpfd, &risultato, sizeof(risultato), 0, (struct sockaddr *)&cliaddr, len) < 0) {
        perror("sendto");
    }
    continue;
}

// Controlla l'ultima riga (se non terminata da '\n')
if (!is_new_line && count >= invioUDP.numOccorrenze && islower(primoCarattere)) {
    risultato++;
}

close(fd);
memset(fullpath, 0, sizeof(fullpath)); // Ripristina fullpath

// FINE CONTA LINEE CARATTERE SOGLIA ================== SNIPPET
