# Nome: Davide Chirichella
# Matricola: 0001071414
# Esercizio: binary exploitation 11 giu 2021

# ==============================================================================
# Esercizio 1 
Una descrizione dei passaggi eseguiti per ricavare l'overflow che permette di sovrascrivere l'indirizzo di ritorno e di come si è composto il payload, incluso il payload finale

-  Apro con dgb
- Inserisco un payload molto corposo per provare a "sfondare" il buffer dell'array, fin quando non noto che l' indirizzo di ritorno è sovrascritto
- Noto che l'app crasha con ritorno a 414141: run $( perl -e 'print "A"x626' ), da ciò run $( perl -e 'print "A"x622, "BBBB"' ) permette di sovrascrivere perfettamente l'indirizzo a BBBB. L'array è lungo 622 
- Metto al posto delle \x90 un "NOP", che mi permetterà di trovare un indirizzo valido e "scivolare" fino al mio codice malevolo
- Un indirizzo valido (che vedo accedendo ai registri sovrascritti dai nop con 'x/200xw $esp') è ad esempio 0xffffd130, che in little endian è \x30\xd1\xff\xff
- Lo shellcode sono 185 cartteri, quindi 45 byte
- In conclusione, dovremmo mettere: 577 byte per di nop , 45 byte per di payload, 4 di ritorno
- Il payload finale è: 
