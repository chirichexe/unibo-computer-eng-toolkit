-> Web Command Injection ------------------------------------------------------------
La Web Command Injection è una vulnerabilità di sicurezza in cui un'applicazione web accetta input dall'utente e lo utilizza all'interno di un comando di sistema senza un'adeguata sanitizzazione o convalida. Ciò consente ad un attaccante di eseguire comandi arbitrari sul server.

-> ESEMPIO------------------// Esempio Specifico: 
http://localhost:8000/?domain=|| cat /etc/passwd -----------------------------------------------

-> Scenario: Supponiamo di avere un'applicazione web che prende un parametro domain tramite una query string e lo utilizza in un comando di sistema. Ad esempio, la nostra applicazione potrebbe avere una funzione per ottenere informazioni su un dominio utilizzando il comando nslookup.

	•	import subprocess
	•	
	•	def lookup_domain(domain):
	•	    command = f"nslookup {domain}"
	•	    subprocess.run(command, shell=True)

Se un utente malintenzionato passa un valore per domain che include caratteri speciali, come ||, può concatenare comandi e fare injection. 
-> Iniezione di Comandi: L'URL http://localhost:8000/?domain=|| cat /etc/passwd tenta di iniettare il comando cat /etc/passwd sfruttando la concatenazione di comandi con ||. 
Passi Dettagliati:
	1 Esecuzione Originale: Supponiamo che il comando originale eseguito sia:
		nslookup example.com
	
	2 Iniezione di Comandi: Se il parametro domain è || cat /etc/passwd, il comando finale diventa:
		nslookup || cat /etc/passwd
			 Il || è un operatore di shell che esegue il secondo comando (cat /etc/passwd) solo se il primo comando (nslookup) fallisce. Tuttavia, se nslookup viene eseguito senza argomenti validi, potrebbe fallire e quindi il cat /etc/passwd verrà eseguito.

	3 Output Atteso: Se il server non ha adeguate misure di sicurezza, l'attaccante può visualizzare il contenuto del file /etc/passwd, che contiene informazioni sugli utenti del sistema.
-------------------------------//

-> 1. CONCATENAZIONE DI COMANDI--------------------------------------------------------
Se un parametro è utilizzato direttamente in un comando di sistema, potrebbe essere vulnerabile alla command injection. Il primo passo in un attacco di questo tipo è riuscire a concatenare comandi aggiuntivi.

Esempio di URL vulnerabile:--------
<http://localhost:8000/?domain=>; ls
In questo caso, il carattere ; viene utilizzato per concatenare comandi. Se il ; è filtrato, si possono provare altre concatenazioni:

	•; Separa due comandi. Esempio: command1; command2

	•&& Esegue command2 solo se command1 ha successo. Esempio: command1 && command2

	•|| Esegue command2 solo se command1 fallisce. Esempio: command1 || command2

	•| Passa l'output di command1 come input a command2. Esempio: command1 | command2

	•() Esegue i comandi in una subshell. Esempio: (command1; command2)

	•& Esegue il comando in background. Esempio: command1 &

-> 2. LETTURA DI FILE--------------------------------------------------------------------
Il secondo passo è tipicamente riuscire a leggere un file. Questo è utile per estrarre informazioni sensibili come configurazioni o password.

Comandi di apertura file in Unix:

	•	cat file : Mostra il contenuto del file.

	•	more file : Mostra il contenuto del file con paginazione.

	•	less file : Simile a more, ma più potente. È interattivo.

	•	head file : Mostra le prime linee del file.

	•	tail file : Mostra le ultime linee del file. tail -n +0 file funziona come cat.

	•	nl file : Mostra il contenuto del file numerando le linee.

	•	sed '' file : Utilizza sed per mostrare il contenuto del file senza modifiche.

-> 3. BYPASS DEI FILTRI-----------------------------------------------------------------
I filtri possono bloccare o sostituire alcune stringhe per prevenire attacchi.

Uso di Metacaratteri:

	•	/etc/passw\\\\d : Utilizza l'escape \\\\d per rappresentare un carattere arbitrario.

	•	/etc/passw[d] : Utilizza i caratteri di gruppo per rappresentare d.

	•	/etc/passw? : Utilizza il carattere ? per rappresentare un singolo carattere arbitrario.

Sostituzioni Calcolate:-----
Se una stringa come "passwd" viene sostituita con una stringa vuota, si può provare a utilizzare tecniche di offuscamento come:

	1 Doppio Inserimento: Inserisci due volte la stringa, sperando che solo una venga filtrata. Esempio:
	◦passwdpasswd --> passwd (se il filtro NON è globale).

	2 Spezzo la Stringa: Suddividi la stringa in modo che il filtro NON la rilevi. Esempio:
	◦pass passwd wd --> passpasswdwd --> passwd.



//----------------------//
-> Applicazione Pratica
Supponiamo di voler leggere il file /etc/passwd e che il filtro sostituisca la stringa "passwd" con una stringa vuota. Puoi provare a spezzare la stringa:

	1 Genera un comando che concatenando i segmenti, eluda il filtro: cat /etc/passw<segment_1>d<segment_2>	 
Se <segment_1> e <segment_2> vengono trattati separatamente, il filtro potrebbe NON rilevare "passwd".

	2 Se il comando ; è filtrato, prova altri metodi di concatenazione: <http://localhost:8000/?domain=||> cat /etc/passwd
		
	3 Utilizza URL encoding per bypassare i filtri: <http://localhost:8000/?domain=%7C%7C%20cat%20/etc/passwd>
		 In questo esempio, %7C%7C è l'URL encoding di || e %20 è l'URL encoding di uno spazio.
-----------------//
