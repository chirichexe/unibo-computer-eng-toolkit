#es 1#########################################

Vediamo come procedere per creare una regola Suricata che generi un alert per tutto il traffico ICMP solo in entrata sulla rete 192.168.X.X e configurare Suricata di conseguenza.

-> Regola Suricata
La regola che identifica tutto il traffico ICMP in entrata sulla rete 192.168.X.X sarà:
alert icmp any any -> $HOME_NET any (msg:"Ping detected"; sid:100001; rev:1;)

-> Configurazione di Suricata

	1 Modifica del file suricata.yaml: Assicurati di impostare la variabile HOME_NET correttamente in modo che includa l'intervallo di rete 192.168.X.X. Apri il file di configurazione di Suricata (/etc/suricata/suricata.yaml) e modifica la variabile HOME_NET: vars:
	  address-groups:
	    HOME_NET: "[192.168.0.0/16]"
	
	2 Aggiunta della regola personalizzata: Aggiungi la regola al file delle regole locali di Suricata (/etc/suricata/rules/local.rules). Se il file non esiste, crealo e aggiungi la regola: 
alert icmp any any -> $HOME_NET any (msg:"Ping detected"; sid:100001; rev:1;)
	

-> Passaggi dettagliati:----------------------------------------------

	1 Modifica di suricata.yaml: Apri il file suricata.yaml con un editor di testo (es. nano, vim, etc.): sudo nano /etc/suricata/suricata.yaml
	 Trova la sezione HOME_NET e modifica come segue: vars:
	  address-groups:
	    HOME_NET: "[192.168.0.0/16]"
		 Salva e chiudi il file.

	2 Aggiunta della regola locale: Apri o crea il file local.rules: sudo nano /etc/suricata/rules/local.rules
		 Aggiungi la regola: alert icmp any any -> $HOME_NET any (msg:"Ping detected"; sid:100001; rev:1;)
		 Salva e chiudi il file.

	3 Verifica della configurazione: Verifica che la configurazione di Suricata sia corretta: sudo suricata -T -c /etc/suricata/suricata.yaml -v
		 Se ci sono errori, correggili in base ai messaggi di output.

	4 Riavvio di Suricata: Riavvia Suricata per applicare le nuove configurazioni e regole: sudo systemctl restart suricata
		
-> Test della regola:-----
	1 Generazione di traffico ICMP: Utilizza un dispositivo esterno alla rete 192.168.X.X per inviare ping a un dispositivo nella rete 192.168.X.X: ping 192.168.1.1
		
	2 Verifica degli alert: Controlla il file di log degli alert (fast.log) per verificare che gli alert siano generati correttamente: tail -f /var/log/suricata/fast.log
	
	
Se tutto è configurato correttamente, dovresti vedere gli alert per il traffico ICMP in entrata nella rete 192.168.X.X.



#es 2######################################

Per rilevare le richieste a `evilcorp.com` senza utilizzare il protocollo HTTP o la porta 80, possiamo creare regole Suricata che identificano sia le richieste DNS che le connessioni IP dirette verso `evilcorp.com`.

-> ### Regola 1: DNS Query per `evilcorp.com`

Questa regola genera un alert per qualsiasi richiesta DNS che cerca di risolvere `evilcorp.com`.

alert dns any any -> any any (msg:"DNS query for evilcorp.com"; dns.query; content:"evilcorp.com"; nocase; sid:100002; rev:1;)

#Analisi della Regola 1:

1. `alert`:
    - Indica che questa regola genererà un alert quando viene soddisfatta la condizione specificata.

2. `dns`:
    - Specifica che la regola si applica ai pacchetti DNS. Il protocollo DNS (Domain Name System) è utilizzato per risolvere i nomi di dominio in indirizzi IP.

3. `any any -> any any`:
    - `any any` (prima parte): Qualsiasi indirizzo IP sorgente e qualsiasi porta sorgente.
    - `->`: Indica la direzione del traffico, da sinistra a destra.
    - `any any` (seconda parte): Qualsiasi indirizzo IP di destinazione e qualsiasi porta di destinazione.

4. `(msg:"DNS query for evilcorp.com";`:
    - `msg:"DNS query for evilcorp.com"`: Il messaggio dell'alert che verrà registrato nei log quando la regola viene attivata. Questo messaggio aiuta ad identificare rapidamente il motivo dell'alert.

5. `dns.query;`:
    - `dns.query`: Specifica che la regola deve esaminare le query DNS. Questo campo viene utilizzato per cercare specifici contenuti nelle richieste DNS.

6. `content:"evilcorp.com";`:
    - `content:"evilcorp.com"`: La stringa di contenuto che Suricata cercherà all'interno delle query DNS. In questo caso, cercherà il dominio `evilcorp.com`.

7. `nocase;`:
    - `nocase`: Specifica che la ricerca del contenuto deve essere fatta in modo insensibile al caso (case-insensitive). Questo significa che verranno rilevate query per `evilcorp.com`, `EvilCorp.com`, `EVILCORP.COM`, ecc.

8. `sid:100002;`:
    - `sid:100002`: L'ID della regola (Signature ID). Ogni regola deve avere un SID univoco per essere identificata univocamente all'interno del sistema di regole di Suricata. I SID personalizzati generalmente iniziano da 1000001 in poi per evitare conflitti con le regole predefinite di Suricata.

9. `rev:1;`:
    - `rev:1`: La revisione della regola. Ogni volta che una regola viene aggiornata, la revisione viene incrementata. Questo aiuta a tenere traccia delle modifiche alle regole.

-> ### Regola 2: Connessione IP diretta verso `evilcorp.com`

Per identificare le connessioni IP dirette verso`evilcorp.com`, è necessario fare come segue:

alert ip any any -> evilcorp.com any (msg:"Request for evilcorp.com" sid:100003; rev:1;)

Per identificare le connessioni IP dirette verso `evilcorp.com`, è necessario conoscere gli indirizzi IP associati a `evilcorp.com`. Supponendo che gli IP di `evilcorp.com` siano ad esempio `192.0.2.1` e `192.0.2.2`, possiamo scrivere regole specifiche per questi IP. In pratica, dovrai risolvere `evilcorp.com` per ottenere gli IP correnti e aggiornare le regole di conseguenza.

alert ip any any -> 192.0.2.1 any (msg:"Request for evilcorp.com"; sid:100003; rev:1;)
alert ip any any -> 192.0.2.2 any (msg:"Request for evilcorp.com"; sid:100004; rev:1;)

### Configurazione di Suricata

1. aggiunta delle regole personalizzate:
Aggiungi le regole al file delle regole locali di Suricata (`/etc/suricata/rules/local.rules`). Se il file non esiste, crealo e aggiungi le regole:
    
 
    alert dns any any -> any any (msg:"DNS query for evilcorp.com"; dns.query; content:"evilcorp.com"; nocase; sid:100002; rev:1;)
    alert ip any any -> 192.0.2.1 any (msg:"Request for evilcorp.com"; sid:100003; rev:1;)
    alert ip any any -> 192.0.2.2 any (msg:"Request for evilcorp.com"; sid:100004; rev:1;)
    

### Passaggi dettagliati:

1. Aggiunta delle regole:
    
    Apri o crea il file `local.rules`:
    
    sudo nano /etc/suricata/rules/local.rules
    
    Aggiungi le regole:
    
    alert dns any any -> any any (msg:"DNS query for evilcorp.com"; dns.query; content:"evilcorp.com"; nocase; sid:100002; rev:1;)
    alert ip any any -> 192.0.2.1 any (msg:"Request for evilcorp.com"; sid:100003; rev:1;)
    alert ip any any -> 192.0.2.2 any (msg:"Request for evilcorp.com"; sid:100004; rev:1;)
    
    Salva e chiudi il file.
    
2. Verifica della configurazione:
    
    Verifica che la configurazione di Suricata sia corretta:
    
    sudo suricata -T -c /etc/suricata/suricata.yaml -v
    
    Se ci sono errori, correggili in base ai messaggi di output.
    
3. Riavvio di Suricata:
    
    Riavvia Suricata per applicare le nuove configurazioni e regole:
    
    sudo systemctl restart suricata
    

### Test delle regole

1. Generazione di traffico DNS:
Utilizza il comando `dig` o un altro strumento per fare una query DNS a `evilcorp.com`:
  
    dig evilcorp.com
    
2. Connessione IP diretta:
Utilizza `ping` o un altro strumento per tentare di connetterti direttamente agli IP risolti di `evilcorp.com`:
    
    ping 192.0.2.1
    
3. Verifica degli alert:
Controlla il file di log degli alert (`fast.log`) per verificare che gli alert siano generati correttamente:
    
    tail -f /var/log/suricata/fast.log
    

Seguendo questi passaggi, puoi creare e testare regole Suricata per monitorare qualsiasi richiesta verso `evilcorp.com` senza utilizzare il protocollo HTTP o la porta 80.


#es 3#################################

Per individuare il protocollo e i due indirizzi IP all'interno di un file .pcapng (Packet Capture Next Generation), puoi utilizzare strumenti come Wireshark. Ecco come puoi procedere:

1. Apri il file .pcapng con Wireshark:
    - Avvia Wireshark sul tuo computer.
    - Seleziona l'opzione per aprire un file e naviga fino al file .pcapng che vuoi analizzare.
    - Una volta aperto il file, Wireshark visualizzerà tutti i pacchetti catturati.

2. Analizza i pacchetti:
    - Esamina i pacchetti nel file .pcapng. Wireshark mostrerà dettagli come indirizzi IP sorgente e di destinazione, protocollo, porte e altro ancora per ogni pacchetto.

3. Filtraggio dei pacchetti:
    - Utilizza i filtri di Wireshark per concentrarti solo sul protocollo di interesse. Ad esempio, puoi filtrare i pacchetti Telnet utilizzando il filtro `telnet`.

4. Identificazione dei protocolli:
    - Guarda i protocolli presenti nei pacchetti catturati. Puoi identificare il protocollo in base al campo "Protocol" mostrato da Wireshark per ciascun pacchetto.

5. Individuazione degli indirizzi IP:
    - Esamina gli indirizzi IP sorgente e di destinazione nei pacchetti per identificare i due IP coinvolti nella comunicazione. Wireshark mostra questi indirizzi nei campi "Source" e "Destination" per ciascun pacchetto.

6. Confronto con l'output della tua regola Suricata:
    - Una volta individuati il protocollo e gli indirizzi IP, confronta questi dati con quelli che hai utilizzato per creare la tua regola Suricata. Assicurati che siano coerenti con ciò che hai osservato nel file .pcapng.



Usando quindi wiresherk si è identificato correttamente il protocollo del traffico come Telnet e che gli indirizzi IP coinvolti sono 192.168.56.1 e 192.168.56.8, e la porta di destinazione del protocollo è la 23 mentre quella sorgente è 41852.

La regola Suricata seguente serve per rilevare il traffico Telnet tra gli indirizzi IP specificati.

alert tcp 192.168.56.1 41852 -> 192.168.56.8 23 (msg:"Flag detected"; flow:from_client; flowbits:set,logged_in; content:"sec:sec"; sid:100005; rev:1;)

Spieghiamo i vari componenti della regola:

- `alert tcp`: Specifica che stiamo creando una regola per il protocollo TCP.

- `192.168.56.1 41852`: Indica che il traffico deve provenire dall'indirizzo IP 192.168.56.1 da la porta sorgente `41852`.

- `->`: Indica la direzione del flusso di traffico, da sinistra a destra.

- `192.168.56.8 23`: Specifica che il traffico deve essere diretto all'indirizzo IP 192.168.56.8 sulla porta 23 (la porta standard per Telnet).

- `(msg:"Flag detected";`: Il messaggio dell'alert che verrà registrato quando la regola viene attivata.

- `flow:from_client;`: Specifica che la regola deve essere applicata solo al flusso di traffico in arrivo dal client.

- `flowbits:set,logged_in;`: Questa parte della regola imposta un flag di flusso denominato "logged_in" quando viene soddisfatta la condizione della regola. I flag di flusso sono variabili interne utilizzate da Suricata per tenere traccia dello stato del flusso di traffico. In questo caso, il flag "logged_in" viene impostato quando la regola viene attivata, indicando che il client è stato autenticato.

- `content:"sec:sec";`: Contiene il pattern "sec:sec" che, suppongo, sia indicativo della flag da rilevare.

- `sid:100005; rev:1;`: L'ID della regola e la sua revisione.

L'opzione `payload-printable` nel file di configurazione di Suricata (`suricata.yaml`) è stata abilitata per ottenere i payload dei pacchetti catturati, che verranno quindi esaminati per recuperare la flag.

