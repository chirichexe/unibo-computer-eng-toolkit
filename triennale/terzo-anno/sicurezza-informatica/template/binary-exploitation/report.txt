# Nome: Davide Chirichella
# Matricola: 0001071414
# Esercizio: binary exploitation GG MM AAAA

# ==============================================================================
# Shellcode --------------------------------------------------------------------

1. Apro il binario con gdb per analizzare il comportamento del programma

2. Inizio provando a inviare input molto lunghi per provare a "rompere" il buffer e sovrascrivere l'indirizzo di ritorno:
    run $(perl -e 'print "A"x626')

3. L’esecuzione ha fatto crashare il programma con un errore che indicava un salto "preciso" all’indirizzo 0x41414141 (AAAA). L'indirizzo è sovrascritto.
    run $(perl -e 'print "A"x622 . "BBBB"') per controllare che il buffer è effettivamente lungo 622 byte 

4. Per eseguire lo shellcode è opportuno usare NOP che non fanno nulla e fanno "scivolare" l'esecuzione fino al codice malevolo

5. Analizzo con 'x/200xw $esp' la memoria a runtime per trovare un indirizzo valido dove risiedeva il buffer con i NOP e lo shellcode. 
    Ad esempio, ho trovato l’indirizzo 0xffffd130 (in little-endian: '\x30\xd1\xff\xff' )

6. Poichè lo shellcode è lungo 185 caratteri, quindi 45 byte, il payload finale avrà:

- Buffer da 622 byte, di cui 577 di NOP e 45 di shellcode
- 4 byte per l'indirizzo di ritorno

# Payload finale --------------------------------------------------------------

perl -e 'print "\x90"x577 . "<SHELLCODE>" . "\x30\xd1\xff\xff"'

# ==============================================================================
